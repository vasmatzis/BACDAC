% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ploidy.R
\name{calculatePloidy}
\alias{calculatePloidy}
\title{Determines ploidy of a given sample}
\usage{
calculatePloidy(
  sampleId,
  outputDir,
  alternateId = NULL,
  readDepthPer30kbBin = NULL,
  readDepthPer100kbBin = NULL,
  segmentation,
  segmentationBinSize = 30000,
  hetScoreData,
  dPeaksCutoff = 0.01,
  penaltyCoefForAddingGrids = 0.49,
  minGridHeight = 0.2,
  minPeriodManual = -1,
  maxPeriodManual = -1,
  grabDataPercentManual = -1,
  origMaxPercentCutoffManual = -1,
  noPdf = FALSE,
  forceFirstDigPeakCopyNum = -1,
  minReasonableSegmentSize = 5500000,
  heterozygosityScoreThreshold = 0.98,
  allowedTumorPercent = 106,
  hsNormMat = NULL
)
}
\arguments{
\item{sampleId}{sample Identifier}

\item{outputDir}{output directory}

\item{alternateId}{optional secondary sample identifier}

\item{readDepthPer30kbBin}{read depth for 30 kb bins, with bin index in linear coordinates}

\item{readDepthPer100kbBin}{read depth for 100 kb bins, with bin index in linear coordinates}

\item{segmentation}{identified regions of the genome with constant read depth. Data.frame with required columns:
chr, start, end, rd; optional: cnvState (1=loss, 2=normal, 3=gain) for color coded linear linear genome plot}

\item{segmentationBinSize}{bin size used for the read depth in the segmentation data}

\item{hetScoreData}{heterozygosity scores determined per 30 kb bin over a 1 Mb region}

\item{dPeaksCutoff}{dPeaksCutoff min grid height for a peak to be considered a digital peak}

\item{penaltyCoefForAddingGrids}{penalty for adding additional peaks to the digital peak alignment}

\item{minGridHeight}{minimum value that can be assigned to the gridHeights}

\item{minPeriodManual}{manually set \code{minPeriod} within \code{calculatePloidy}}

\item{maxPeriodManual}{manually set \code{maxPeriod} within \code{calculatePloidy}}

\item{grabDataPercentManual}{portion of main peak data to grab, other peaks will be scaled based on read depth (x location),
set to -1 to base off of mainPeak width}

\item{origMaxPercentCutoffManual}{peaks smaller than this portion of the max peak are not considered; set to -1 to use default value}

\item{noPdf}{if present, do not create pdfs}

\item{forceFirstDigPeakCopyNum}{value to force copy number of first digital peak, use only when ploidy calculation is wrong}

\item{minReasonableSegmentSize}{initial smallest segment size to include in ploidy test segments; want to keep as large as possible
to avoid 0N segments, but will decrease size if not enough segments are found}

\item{heterozygosityScoreThreshold}{peaks with a hetScore mode above this value are considered heterozygous, typically 0.98, but may vary depending on NGS library quality and preparation}

\item{hsNormMat}{hetScores from  a database of 23 Normals,  101046 x 23 rows, one row for each 30 kb segment of the genome, 1-22, X and a part of Y. Columns are values for each of the 23 Normals for each segment}
}
\description{
Fit the peaks from the read depth distributions to a digital grid.
Evaluate the heterozygosity score to determine if first digital peak is 1N or 2N.
Then find the expected number of reads in the 2N peak and normalize that value to one bp.
Tumor percent is calculated from the two biggest digital peaks.
If outputDir is provided and noPdf=FALSE, figures will saved to
}
\examples{
\dontrun{
  library(BACDAC)
  library(logging)
  # calculatePloidyExample.R
  basicConfig("DEBUG")
  noPdf=TRUE                          # TRUE= print to screen, FALSE=print to pdf (i e. outputDir/dev/ploidy)
  # outputDir = tempdir();              # output folder for pdfs etc.
  # outputDir='/research/labs/experpath/vasm/shared/NextGen/johnsonsh/Routput/BACDAC'
  outputDir = '/tmp/RtmpITBnDE'
  sampleId='TCGA-14-1402-02A_ds'; alternateId=66301

  ### load data ###
  inputDir <- system.file('extdata', package = "BACDAC") # or '/research/labs/experpath/vasm/shared/NextGen/johnsonsh/Rprojects/BACDAC/inst/extdata'

  # hetScores from 23 Normals,  101046 x 23 rows, one row for each 30kb segment of the genome, 1-22, X and a part of Y. Columns are values for each of the 23 Normals for each segment
  # TODO: can I also make this example data? or should it be downloaded separately? file size= 18.6M
  hsNormMat <- bmdTools::loadRdata('/research/labs/experpath/vasm/shared/NextGen/Misc/pipelineInputs/hetScoreAnalysis/lohMat.Rdata') # aka lohMat

  # segmentation data
  segmentationFile <- file.path(inputDir, paste0(sampleId, '_segmentation.csv'))
  segmentation= loadSegmentationFile(segmentationFile)

  # hetScore data - the output from calculateHetScore()
  hetScoreDir='/research/labs/experpath/vasm/shared/NextGen/johnsonsh/Routput/BACDAC/reports'
  hetScoreDir = file.path(outputDir,'reports')
  hetScorePerBinWigFile <- file.path(hetScoreDir, paste0(sampleId, '_hetScorePerBin.wig.gz'))
  hetScoreData <- as.data.frame(rtracklayer::import.wig(hetScorePerBinWigFile))

  # read depth data
  thirtyKbFile=file.path(inputDir, paste0(sampleId,'_','readDepthPer30kbBin.Rds'))
  readDepthPer30kbBin = readRDS(file=thirtyKbFile )
  hundredKbFile=file.path(inputDir, paste0(sampleId,'_','readDepthPer100kbBin.Rds'))
  readDepthPer100kbBin = readRDS(file=hundredKbFile )


  # defaults
  segmentationBinSize=30000; numChroms=24;
  omitAnnotations = FALSE;
  dPeaksCutoff=0.01;    penaltyCoefForAddingGrids=0.49; minGridHeight=0.2; minPeriodManual=-1; maxPeriodManual=-1; forceFirstDigPeakCopyNum=-1;   # digital peaks
  grabDataPercentManual= -1; origMaxPercentCutoffManual=-1;  #  peaksByDensity
  minReasonableSegmentSize=5.5e6;
  heterozygosityScoreThreshold=0.98;  # If segment hetScore is more than this, the segment is heterozygous
  allowedTumorPercent = 106


  ### call calculatePloidy, the function to do all the ploidy work ---------
  loginfo('calculate ploidy for \%s ', sampleId)
  calcPloidyResult=calculatePloidy(sampleId=sampleId, outputDir = outputDir, noPdf=noPdf, alternateId=alternateId,
                         readDepthPer30kbBin = readDepthPer30kbBin, readDepthPer100kbBin= readDepthPer100kbBin,
                         segmentation=segmentation, hetScoreData = hetScoreData,
                         segmentationBinSize=segmentationBinSize,

                         dPeaksCutoff=dPeaksCutoff,    penaltyCoefForAddingGrids=penaltyCoefForAddingGrids, minGridHeight=minGridHeight, minPeriodManual=minPeriodManual, maxPeriodManual=maxPeriodManual, forceFirstDigPeakCopyNum=forceFirstDigPeakCopyNum,   # digital peaks
                         grabDataPercentManual= grabDataPercentManual,  origMaxPercentCutoffManual=origMaxPercentCutoffManual,  #  peaksByDensity

                         minReasonableSegmentSize=minReasonableSegmentSize,
                         heterozygosityScoreThreshold=heterozygosityScoreThreshold,  # If segment hetScore is more than this, the segment is heterozygous
                         allowedTumorPercent = allowedTumorPercent,
                         hsNormMat=hsNormMat
  )

  calcPloidyResultOutputFile=file.path(outputDir, paste0(sampleId, '_calculatePloidyResult.Rds'))
  loginfo('saving result to: \%s',calcPloidyResultOutputFile)
  saveRDS(calcPloidyResult, file=calcPloidyResultOutputFile)

  loginfo('tumor percentage: \%s ',round(calcPloidyResult$percentTumor) )
  segmentPloidy <- sum(calcPloidyResult$segmentData$size * calcPloidyResult$segmentData$cnLevel)/sum(calcPloidyResult$segmentData$size) # weighted by length of segment
  loginfo('approximate ploidy: \%s ',round(segmentPloidy,1) )

}
}
